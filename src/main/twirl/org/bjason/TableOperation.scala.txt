@(crud:org.bjason.Crud)

package @(crud.getPackageName)@(crud.name.toLowerCase).tables

import java.sql.Timestamp

import javax.inject.{Inject, Singleton}
import play.api.db.slick.DatabaseConfigProvider
import slick.jdbc.JdbcProfile

import scala.concurrent.{ExecutionContext, Future}

@@Singleton
class @(crud.name)TableOperation @@Inject()(dbConfigProvider: DatabaseConfigProvider)(implicit ec: ExecutionContext) {
  private val dbConfig = dbConfigProvider.get[JdbcProfile]

  import dbConfig._
  import profile.api._

  private class @(crud.name)Table(tag: Tag) extends Table[@(crud.name)Model](tag, "@(crud.name.toUpperCase)") {
@(crud.createTable)
  }

  private val request = TableQuery[@(crud.name)Table]

@(crud.createCreate)
@(crud.createUpdate)

  def get( @(crud.fields(0).fieldName):@(crud.fields(0).fieldType) )   = db.run {
    val row = for { row <- request.filter { r => r.@(crud.fields(0).fieldName) === @(crud.fields(0).fieldName) } } yield row
    row.result.head
  }

  def delete(@(crud.fields(0).fieldName):@(crud.fields(0).fieldType) ) : Future[Long]  = db.run {
    val row = for { row <- request.filter { r => r.@(crud.fields(0).fieldName) === @(crud.fields(0).fieldName) } } yield row
    row.delete.map(returnStatus(_))
  }

  def toTimestamp(s:String) = {
    new java.sql.Timestamp(s.toLong)
  }
  def getBy(query:String,by:String): Future[Seq[@(crud.name)Model]]  = db.run {

    s"${query}" match {
    @for(f <- crud.fields) {
      case "@(f.fieldName)" => request.filter (_.@(f.fieldName)@(if (f.fieldType.startsWith("Option")){".getOrElse(null)"}) === @(
           if (f.fieldType.contains("Long") ) { "by.toLong" }
           else if ( f.fieldType.contains( "java.sql.Timestamp") ) { "toTimestamp(by)" }
           else if ( f.fieldType.contains( "Double") ) { "by.toDouble" }
           else { "by" }    ) ).result
    }
      case _ => throw new Exception("No such column")
    }
  }

  def list(sortedBy:Option[String],direction:Option[String]): Future[Seq[@(crud.name)Model]]  = db.run {
    if ( sortedBy.isDefined ) {
      val column = sortedBy.get
      val directionSort = direction.getOrElse("asc").toLowerCase

      s"${directionSort}_${column}" match {
      @for(f <- crud.fields) {
        case "asc_@(f.fieldName)" => request.sortBy (_.@(f.fieldName).asc).result
        case "desc_@(f.fieldName)" => request.sortBy (_.@(f.fieldName).desc).result
        }
        case _ => throw new Exception("No such column or asc/desc")
      }
    } else {
      request.result
    }

  }

  def returnStatus(status:Long) =  status;
}
